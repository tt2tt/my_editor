@startuml ArchitectureDiagram
' MVC構造のクラス図。ControllerがModelとView間の仲介を行う。
skinparam style strictuml
skinparam packageStyle rectangle
skinparam backgroundColor #f5f5f5
skinparam ArrowColor #333333
skinparam ArrowThickness 1
skinparam defaultTextAlignment center

package "Model" {
  class FileModel {
    +load_file(path: Path): str
    +save_file(path: Path, content: str): None
    +list_open_files(): list
  }

  class FolderModel {
    +list_directory(path: Path): list
    +create_item(path: Path, is_dir: bool): None
    +delete_item(path: Path): None
  }

  class TabState {
    +add_tab(file_path: Path): str
    +mark_dirty(tab_id: str, dirty: bool): None
    +close_tab(tab_id: str): None
  }

  class SettingsModel {
    +load_settings(): dict
    +save_settings(data: dict): None
    +get_api_key(): str | None
    +set_api_key(key: str): None
  }
}

package "View" {
  class MainWindow {
    +show(): None
    -_build_layout(): None
    -_connect_signals(): None
  }

  class EditorTabWidget {
    +add_editor_tab(file_path: Path, content: str): int
    +set_dirty(tab_index: int, dirty: bool): None
    +get_current_editor(): QPlainTextEdit
  }

  class FolderTree {
    +populate(nodes: list): None
    +select_path(path: Path): None
  }

  class ChatPanel {
    +append_user_message(text: str): None
    +append_ai_message(text: str): None
    +request_ai_completion(): None
  }
}

package "Controller" {
  class AppController {
    +start(): None
    -_wire_events(): None
  }

  class EventBus {
    +subscribe(event: str, handler)
    +publish(event: str, payload)
  }

  class FileController {
    +open_file(path: Path): int
    +save_current_file(): Path | None
    +save_file_as(path: Path): Path | None
  }

  class FolderController {
    +load_initial_tree(path: Path): None
    +handle_create(path: Path, is_dir: bool): None
    +handle_delete(path: Path): None
  }

  class TabController {
    +create_tab(path: Path, content: str): str
    +mark_current_dirty(status: bool): None
    +close_tab(tab_id: str): None
  }

  class AIController {
    +generate_code(prompt: str): str
    +stream_chat(prompt: str): Iterable
  }
}

AppController --> MainWindow : controls
AppController --> FileController : coordinates
AppController --> AIController : coordinates
AppController --> SettingsModel : uses
AppController --> EventBus : dispatches

FileController --> FileModel : uses
FileController --> EditorTabWidget : updates
FileController --> FolderModel : queries
FolderController --> FolderModel : uses
FolderController --> FolderTree : updates
TabController --> TabState : updates
TabController --> EditorTabWidget : updates

AIController --> ChatPanel : updates
AIController --> SettingsModel : reads/writes
AIController --> FileModel : optional_context

MainWindow -[dashed]-> EventBus : emits_signals
EventBus --> FileController : propagates

MainWindow o-- EditorTabWidget : owns
MainWindow o-- FolderTree : owns
MainWindow o-- ChatPanel : owns

FolderTree --> AppController : notifies
EditorTabWidget --> FileController : emits_dirty
ChatPanel --> AIController : submits_prompt

@enduml
